/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IPWNSimpleLoanListOffer {
  export type OfferStruct = {
    collateralCategory: PromiseOrValue<BigNumberish>;
    collateralAddress: PromiseOrValue<string>;
    collateralId: PromiseOrValue<BigNumberish>;
    collateralAmount: PromiseOrValue<BigNumberish>;
    loanAssetAddress: PromiseOrValue<string>;
    loanAmount: PromiseOrValue<BigNumberish>;
    loanYield: PromiseOrValue<BigNumberish>;
    duration: PromiseOrValue<BigNumberish>;
    expiration: PromiseOrValue<BigNumberish>;
    borrower: PromiseOrValue<string>;
    lender: PromiseOrValue<string>;
    isPersistent: PromiseOrValue<boolean>;
    nonce: PromiseOrValue<BigNumberish>;
  };

  export type OfferStructOutput = [
    number,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    number,
    number,
    string,
    string,
    boolean,
    BigNumber
  ] & {
    collateralCategory: number;
    collateralAddress: string;
    collateralId: BigNumber;
    collateralAmount: BigNumber;
    loanAssetAddress: string;
    loanAmount: BigNumber;
    loanYield: BigNumber;
    duration: number;
    expiration: number;
    borrower: string;
    lender: string;
    isPersistent: boolean;
    nonce: BigNumber;
  };
}

export interface IPWNSimpleLoanListOfferInterface extends utils.Interface {
  functions: {
    "encodeLoanTermsFactoryData((uint8,address,uint256,uint256,address,uint256,uint256,uint32,uint40,address,address,bool,uint256))": FunctionFragment;
    "getOfferHash((uint8,address,uint256,uint256,address,uint256,uint256,uint32,uint40,address,address,bool,uint256))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "encodeLoanTermsFactoryData" | "getOfferHash"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "encodeLoanTermsFactoryData",
    values: [IPWNSimpleLoanListOffer.OfferStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getOfferHash",
    values: [IPWNSimpleLoanListOffer.OfferStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "encodeLoanTermsFactoryData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOfferHash",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IPWNSimpleLoanListOffer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPWNSimpleLoanListOfferInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    encodeLoanTermsFactoryData(
      offer: IPWNSimpleLoanListOffer.OfferStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getOfferHash(
      offer: IPWNSimpleLoanListOffer.OfferStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  encodeLoanTermsFactoryData(
    offer: IPWNSimpleLoanListOffer.OfferStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  getOfferHash(
    offer: IPWNSimpleLoanListOffer.OfferStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    encodeLoanTermsFactoryData(
      offer: IPWNSimpleLoanListOffer.OfferStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    getOfferHash(
      offer: IPWNSimpleLoanListOffer.OfferStruct,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    encodeLoanTermsFactoryData(
      offer: IPWNSimpleLoanListOffer.OfferStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOfferHash(
      offer: IPWNSimpleLoanListOffer.OfferStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    encodeLoanTermsFactoryData(
      offer: IPWNSimpleLoanListOffer.OfferStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOfferHash(
      offer: IPWNSimpleLoanListOffer.OfferStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

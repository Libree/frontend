/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IDAO {
  export type ActionStruct = {
    to: PromiseOrValue<string>;
    value: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
  };

  export type ActionStructOutput = [string, BigNumber, string] & {
    to: string;
    value: BigNumber;
    data: string;
  };
}

export interface CreditDelegatorInterface extends utils.Interface {
  functions: {
    "APPROVE_DELEGATION_PERMISSION_ID()": FunctionFragment;
    "BORROW_AAVE_PERMISSION_ID()": FunctionFragment;
    "BORROW_AND_TRANSFER_AAVE_PERMISSION_ID()": FunctionFragment;
    "REGISTER_ACTIONS_PERMISSION_ID()": FunctionFragment;
    "UPGRADE_PLUGIN_PERMISSION_ID()": FunctionFragment;
    "WITHDRAWN_AAVE_PERMISSION_ID()": FunctionFragment;
    "_currentPending()": FunctionFragment;
    "_lastExecuted()": FunctionFragment;
    "actions(uint256)": FunctionFragment;
    "approveDelegation(address,address,uint256)": FunctionFragment;
    "borrow(address,uint256,uint256,uint16,address)": FunctionFragment;
    "borrowAndTransfer(address,uint256,uint256,uint16,address,address)": FunctionFragment;
    "dao()": FunctionFragment;
    "executeActions(uint256)": FunctionFragment;
    "implementation()": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "pluginType()": FunctionFragment;
    "poolAddress()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "registerActions(address,(address,uint256,bytes)[],uint256)": FunctionFragment;
    "supply(address,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "withdrawn(address,uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "APPROVE_DELEGATION_PERMISSION_ID"
      | "BORROW_AAVE_PERMISSION_ID"
      | "BORROW_AND_TRANSFER_AAVE_PERMISSION_ID"
      | "REGISTER_ACTIONS_PERMISSION_ID"
      | "UPGRADE_PLUGIN_PERMISSION_ID"
      | "WITHDRAWN_AAVE_PERMISSION_ID"
      | "_currentPending"
      | "_lastExecuted"
      | "actions"
      | "approveDelegation"
      | "borrow"
      | "borrowAndTransfer"
      | "dao"
      | "executeActions"
      | "implementation"
      | "initialize"
      | "pluginType"
      | "poolAddress"
      | "proxiableUUID"
      | "registerActions"
      | "supply"
      | "supportsInterface"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "withdrawn"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "APPROVE_DELEGATION_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BORROW_AAVE_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BORROW_AND_TRANSFER_AAVE_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REGISTER_ACTIONS_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_PLUGIN_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WITHDRAWN_AAVE_PERMISSION_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_currentPending",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_lastExecuted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "actions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approveDelegation",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "borrowAndTransfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "dao", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeActions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "implementation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pluginType",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "poolAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerActions",
    values: [
      PromiseOrValue<string>,
      IDAO.ActionStruct[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supply",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawn",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "APPROVE_DELEGATION_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BORROW_AAVE_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BORROW_AND_TRANSFER_AAVE_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REGISTER_ACTIONS_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_PLUGIN_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WITHDRAWN_AAVE_PERMISSION_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_currentPending",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_lastExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "actions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowAndTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dao", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "implementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pluginType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerActions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "supply", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdrawn", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface CreditDelegator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CreditDelegatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    APPROVE_DELEGATION_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<[string]>;

    BORROW_AAVE_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;

    BORROW_AND_TRANSFER_AAVE_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<[string]>;

    REGISTER_ACTIONS_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<[string]>;

    UPGRADE_PLUGIN_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;

    WITHDRAWN_AAVE_PERMISSION_ID(overrides?: CallOverrides): Promise<[string]>;

    _currentPending(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    _lastExecuted(overrides?: CallOverrides): Promise<[BigNumber]>;

    actions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        dao: string;
        allowFailureMap: BigNumber;
        executed: boolean;
      }
    >;

    approveDelegation(
      _asset: PromiseOrValue<string>,
      _delegatee: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    borrow(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _interestRateMode: PromiseOrValue<BigNumberish>,
      _referralCode: PromiseOrValue<BigNumberish>,
      _onBehalfOf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    borrowAndTransfer(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _interestRateMode: PromiseOrValue<BigNumberish>,
      _referralCode: PromiseOrValue<BigNumberish>,
      _onBehalfOf: PromiseOrValue<string>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dao(overrides?: CallOverrides): Promise<[string]>;

    executeActions(
      _actionsId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    implementation(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _dao: PromiseOrValue<string>,
      _poolAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pluginType(overrides?: CallOverrides): Promise<[number]>;

    poolAddress(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    registerActions(
      _dao: PromiseOrValue<string>,
      _actions: IDAO.ActionStruct[],
      _allowFailureMap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supply(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawn(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  APPROVE_DELEGATION_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;

  BORROW_AAVE_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;

  BORROW_AND_TRANSFER_AAVE_PERMISSION_ID(
    overrides?: CallOverrides
  ): Promise<string>;

  REGISTER_ACTIONS_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;

  UPGRADE_PLUGIN_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;

  WITHDRAWN_AAVE_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;

  _currentPending(overrides?: CallOverrides): Promise<BigNumber>;

  _lastExecuted(overrides?: CallOverrides): Promise<BigNumber>;

  actions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean] & {
      dao: string;
      allowFailureMap: BigNumber;
      executed: boolean;
    }
  >;

  approveDelegation(
    _asset: PromiseOrValue<string>,
    _delegatee: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  borrow(
    _asset: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _interestRateMode: PromiseOrValue<BigNumberish>,
    _referralCode: PromiseOrValue<BigNumberish>,
    _onBehalfOf: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  borrowAndTransfer(
    _asset: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _interestRateMode: PromiseOrValue<BigNumberish>,
    _referralCode: PromiseOrValue<BigNumberish>,
    _onBehalfOf: PromiseOrValue<string>,
    _beneficiary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dao(overrides?: CallOverrides): Promise<string>;

  executeActions(
    _actionsId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  implementation(overrides?: CallOverrides): Promise<string>;

  initialize(
    _dao: PromiseOrValue<string>,
    _poolAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pluginType(overrides?: CallOverrides): Promise<number>;

  poolAddress(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  registerActions(
    _dao: PromiseOrValue<string>,
    _actions: IDAO.ActionStruct[],
    _allowFailureMap: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supply(
    _asset: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    _interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawn(
    _asset: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    APPROVE_DELEGATION_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<string>;

    BORROW_AAVE_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;

    BORROW_AND_TRANSFER_AAVE_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<string>;

    REGISTER_ACTIONS_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;

    UPGRADE_PLUGIN_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;

    WITHDRAWN_AAVE_PERMISSION_ID(overrides?: CallOverrides): Promise<string>;

    _currentPending(overrides?: CallOverrides): Promise<BigNumber>;

    _lastExecuted(overrides?: CallOverrides): Promise<BigNumber>;

    actions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean] & {
        dao: string;
        allowFailureMap: BigNumber;
        executed: boolean;
      }
    >;

    approveDelegation(
      _asset: PromiseOrValue<string>,
      _delegatee: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    borrow(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _interestRateMode: PromiseOrValue<BigNumberish>,
      _referralCode: PromiseOrValue<BigNumberish>,
      _onBehalfOf: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    borrowAndTransfer(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _interestRateMode: PromiseOrValue<BigNumberish>,
      _referralCode: PromiseOrValue<BigNumberish>,
      _onBehalfOf: PromiseOrValue<string>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    dao(overrides?: CallOverrides): Promise<string>;

    executeActions(
      _actionsId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    implementation(overrides?: CallOverrides): Promise<string>;

    initialize(
      _dao: PromiseOrValue<string>,
      _poolAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    pluginType(overrides?: CallOverrides): Promise<number>;

    poolAddress(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    registerActions(
      _dao: PromiseOrValue<string>,
      _actions: IDAO.ActionStruct[],
      _allowFailureMap: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supply(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawn(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    APPROVE_DELEGATION_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    BORROW_AAVE_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;

    BORROW_AND_TRANSFER_AAVE_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    REGISTER_ACTIONS_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    UPGRADE_PLUGIN_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;

    WITHDRAWN_AAVE_PERMISSION_ID(overrides?: CallOverrides): Promise<BigNumber>;

    _currentPending(overrides?: CallOverrides): Promise<BigNumber>;

    _lastExecuted(overrides?: CallOverrides): Promise<BigNumber>;

    actions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approveDelegation(
      _asset: PromiseOrValue<string>,
      _delegatee: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    borrow(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _interestRateMode: PromiseOrValue<BigNumberish>,
      _referralCode: PromiseOrValue<BigNumberish>,
      _onBehalfOf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    borrowAndTransfer(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _interestRateMode: PromiseOrValue<BigNumberish>,
      _referralCode: PromiseOrValue<BigNumberish>,
      _onBehalfOf: PromiseOrValue<string>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dao(overrides?: CallOverrides): Promise<BigNumber>;

    executeActions(
      _actionsId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    implementation(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _dao: PromiseOrValue<string>,
      _poolAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pluginType(overrides?: CallOverrides): Promise<BigNumber>;

    poolAddress(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    registerActions(
      _dao: PromiseOrValue<string>,
      _actions: IDAO.ActionStruct[],
      _allowFailureMap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supply(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawn(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    APPROVE_DELEGATION_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BORROW_AAVE_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    BORROW_AND_TRANSFER_AAVE_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REGISTER_ACTIONS_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UPGRADE_PLUGIN_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WITHDRAWN_AAVE_PERMISSION_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _currentPending(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _lastExecuted(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    actions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approveDelegation(
      _asset: PromiseOrValue<string>,
      _delegatee: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    borrow(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _interestRateMode: PromiseOrValue<BigNumberish>,
      _referralCode: PromiseOrValue<BigNumberish>,
      _onBehalfOf: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    borrowAndTransfer(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _interestRateMode: PromiseOrValue<BigNumberish>,
      _referralCode: PromiseOrValue<BigNumberish>,
      _onBehalfOf: PromiseOrValue<string>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dao(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeActions(
      _actionsId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    implementation(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _dao: PromiseOrValue<string>,
      _poolAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pluginType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerActions(
      _dao: PromiseOrValue<string>,
      _actions: IDAO.ActionStruct[],
      _allowFailureMap: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supply(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      _interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawn(
      _asset: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
